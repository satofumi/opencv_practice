/*!
  \page chapter_03_page 3章, OpenCV について知る

  OpenCV で使えるデータ構造についての説明です。C 用のデータ構造について説明されています。

  - \ref chapter_03_matric
  - \ref chapter_03_iplimage
    - \ref chapter_03_iplimage_hsv


  \section chapter_03_matric 行列のデータ構造

  行列のデータ構造の初期化方法からアクセス方法まで、いろいろ説明してあります。\n
  読めばわかる内容ですので、プログラムは省略します。


  \section chapter_03_iplimage 画像のデータ構造

  IplImage について説明してあります。

  \subsection chapter_03_iplimage_hsv HSV 画像の S と V の要素を最大化させるサンプル

  画像にアクセスするサンプルがあったので、そのプログラムを掲載します。プログラムの処理内容は、HSV 画像の S と V の要素だけ値を最大化させているそうです。

  \include chapter_03/example_3-11.cpp

  \image html chapter_03/wii_blade_hsv.jpg "HSV 画像の S と V の要素を飽和させた結果の画像"

  結果、画像が黄色っぽくなりました。\n
  HSV 画像について調べたところ、色の表現方法の１つらしく、HSV とは Hue、Saturation、Value の略語らしい。

  - HSV 色空間 (Wikipedia より)
    - http://ja.wikipedia.org/wiki/HSV%E8%89%B2%E7%A9%BA%E9%96%93

  でも、H と S を最大にしたら、なんで黄色くなるかは不明。\n
  色相の最大は、黄色なのかな。


  \subsection chapter_03_roi 部分領域の変更 (ROI)

  ROI って何？ と思ったら ROI（Region Of Interest） のことらしい。\n
  http://opencv.jp/sample/initialization.html

  ROI を使うと、指定した領域のみフィルタなどの操作が有効になるようだ。

  あと 書籍に掲載されている example 3-12 には間違いがあった、正誤表は、ここ。 \n
  http://www.oreilly.co.jp/books/9784873114132/

  \include chapter_03/example_3-12.cpp

  \image html wii_blade_roi.jpg "\"example_3-12 wii_blade.jpg 20 30 150 300 100\"' で実行したときの結果"

  便利そう。


  \subsection chapter_03_width 部分領域の変更 (widthStep)

  widthStep を使って ROI と同様のことを行うサンプルです。

  \include chapter_03/example_3-13.cpp

  \image html wii_blade_widthStep.jpg "\"example_3-13 wii_blade.jpg 20 30 150 300 50\"' で実行したときの結果"

  ROI でなくて、わざわざ widthStep を使う理由は "ROI は１つの画像に１つしか設定できないから" だそうです。


  \section chapter_03_vector 行列と画像

  \subsection chapter_03_addweighted cvAddWeighted() を用いたアルファブレンド処理

  行列操作を画像に適用する例として、画像に対するアルファブレンド処理を行っています。

  \include chapter_03/example_3-14.cpp

  \image html wii_blade_addweighted.jpg "\"example_3-14 wii_blade.jpg cat.jpg 20 30 150 150 40 60\"' で実行したときの結果"

  猫の画像は http://labaq.com/archives/51089156.html より取得。\n
  ここではアルファブレンドのサンプルのみの紹介だが、他の行列操作についても同様に画像への適用が可能なのだと思う。


  \section chapter_03_data データ保管

  \subsection chapter_03_storage 構造体の設定を読み書きする例

  CSCORE という仕組みには、設定をファイルに出力したり、その出力ファイルを読み込む仕組みが用意されているらしいです。以下は、そのサンプルです。

  最初のプログラムで設定をファイルに出力し、次のサンプルで設定をファイルから読み込んでいます。

  設定をファイルに出力するプログラム
  \include chapter_03/example_3-17.cpp

  出力されたファイル
  \include chapter_03/cfg.xml

  設定をファイルから読み込むプログラム
  \include chapter_03/example_3-19.cpp

  - !!! example_3-17, 3-18, 3-19, p86


  \section chapter_03_ipp IPP

  \subsection chapter_03_ipp_check IPP のインストール確認

  IPP(Integrated Performance Primitives) とは Intel 製の高性能なツールボックスらしいです。\n
  ここでは IPP がインストールされているかを検証するプログラムと、その実行結果を紹介します。

  \include include/example_3-20.cpp

  実行結果
  \verbatim
% ./example_3-20
Libraries: cxcore: 2.1.0
Modules:
% \endverbatim

  私の Linux 環境だと IPP は使われていないようです...。\n
  もしかすると Ubuntu とかメジャーなディストリビューションを使っていると IPP が有効になるのかもしれません。
*/
