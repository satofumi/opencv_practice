/*!
  \page chapter_02_page ２章, OpenCV 入門

  この章の内容。

  - \ref chapter_02_show_image
    - \ref chapter_02_show_image
    - \ref chapter_02_show_movie
    - \ref chapter_02_show_movie_2nd
  - \ref chapter_02_filter
    - \ref chapter_02_filter_smooth
    - \ref chapter_02_filter_size
    - \ref chapter_02_filter_canny
  - \ref chapter_02_camera
    - \ref chapter_02_camera_capture
    - \ref chapter_02_camera_convert


  \section chapter_02_show_image 画像をスクリーンに表示する

  まず、取得済みの画像を OpenCV ライブラリで表示するサンプルが紹介されていました。\n
  そのサンプル、およびコンパイルするための Makefile はこんな感じです。

  <b>example_2-1.cpp</b>
  \include chapter_02/example_2-1.cpp

  <b>Makefile</b>
  \include chapter_02/Makefile

  これらのファイルがある状態で make コマンドを入力するとコンパイルされます。

  \verbatim
% make
g++ -g -O0 -Wall -Werror -I/usr/local/include/opencv    example_2-1.cpp  -lhighgui -o example_2-1 \endverbatim

  プログラムを実行するときには、引数で表示したい画像ファイルへのパスを指定します。\n
  今回は、木刀に Wii リモコンを取り付けた画像をサンプルとして用いました。

  <b>実行コマンド例</b>
  \verbatim
./example_2-1 wii_blade.jpg \endverbatim

  <b>実行結果の例</b>
  \image html show_wii_blade.png 表示されたウィンドウと画像

  まぁ、最初のサンプルということもあり簡単ですね。


  \section chapter_02_show_movie 動画をスクリーンに表示する

  次は、動画を表示するサンプルの掲載です。


  \subsection chapter_02_show_movie_1st 動画ファイルを再生するサンプル

  引数に動画ファイルを指定すると、再生を行うサンプルです。\n
  実行方法やコンパイル方法は、画像を表示するサンプルの example_2-1 と同じなので、プログラムのみ掲載します。

  \include chapter_02/example_2-2.cpp

  詳しいことは確認しないとわかりませんが frame に動画から画像を抜き出し、それを表示させているようです。動画ファイルを指定して実行すると、動画が再生されました。

  \image html g_lang_snapshot.png "再生画面のスナップショット。動画は http://www.limo.fumi2kick.com/forum/lm_forum02.html よりダウンロード。"


  \subsection chapter_02_show_movie_2nd スライドバーを付加

  スライドバーを追加します。\n
  ソースコードの説明については、本で説明してあった通りの内容です。

  \include chapter_02/example_2-3.cpp

  再生に合わせてスライダーが移動するようにしましたが、スライダーをマウスで動かすと、なんだかカクカクします。詳しいことはわかりませんが、よくわからないまま保留にしておきます。\n
  いずれ、わかる日がくるでしょう。

  \image html g_lang_snapshot_2nd.png "再生画面 (スライダー付き)のスナップショット。動画は http://www.limo.fumi2kick.com/forum/lm_forum02.html よりダウンロード"


  \section chapter_02_filter 画像の変換処理

  次は、画像の変換処理です。


  \subsection chapter_02_filter_smooth 画像の平滑化

  cvSmooth() を適用して画像を平滑化し、元画像と合わせて表示するサンプルです。

  \include chapter_02/example_2-4.cpp

  \image html gaussian_converted_image.png "左が元画像, 右が変換後の画像 (GAUSSIAN フィルタ)"

  簡単に変換処理ができるあたり、OpenCV はよくできてると思う。


  \subsection chapter_02_filter_size 画像の縮小

  画像サイズを半分にするサンプル。\n
  必要最小限の説明しかないあたり、このあたりからオライリーらしくなってきます。\n
  初心者にはちょっとつらいです。

  \include chapter_02/example_2-5.cpp

  あと、本に掲載されていたサンプルで filter を引数にして渡している理由が不明です。なので、削りました。

  \image html pyr_converted_image.png "縮小された画像"


  \subsection chapter_02_filter_canny Canny エッジ検出

  Canny エッジ検出のサンプル、らしいです。Canny エッジが何なのかは知らなかったので検索してみました。\n
  http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%83%E3%82%B8%E6%A4%9C%E5%87%BA

  \include chapter_02/example_2-6.cpp

  しかし gimp で変換して作成したグレイスケール画像を使ったところ nChannel が 3 らしく、変換結果を見ることができなかった。

  しばらく悩んでいたが OpenCV.jp の Canny のサンプルを見ると cvLoadImage() でグレイスケール扱いで画像を読み込む方法があったので、それを使うことにした。

  \image html canny_converted_image.png "元画像に直接 Canny フィルタを適用したもの(左), ガウシアンフィルタ後に Canny フィルタを適用したもの(右)"

  画像処理って面白い、と思った。

  それから、example_2-7, example_2-8 はメモリ管理まわりの理解するだけの話題だったので、プログラムは省略します。


  \section chapter_02_camera カメラ

  \subsection chapter_02_camera_capture カメラからの動画を保存

  掲載されていたサンプルプログラムでは、カメラの場合の CvCapture 構造体の扱い方がファイルからのものと違いがないことを示していました。

  が、予定を変更してカメラから動画を保存するサンプルを紹介します。

  \include chapter_02/example_2-9.cpp

  USB カメラを PC に接続してプログラムを実行すると、動作を確認できます。\n
  ファイルが生成されていたら、プログラムは正常に動作しています。

  あと、私の Linux 環境だと root にならないとプログラムは動作しませんでした。


  \subsection chapter_02_camera_convert カメラからの画像の保存

  本には「読めばわかるよね」的な説明がありました。まぁ、わかったことにします。\n
  あと、プログラムを実行すると変換後のファイルができるものの、再生はできませんでした。よくわかりません。

  \include chapter_02/example_2-10.cpp

  具体的に何の変換をしているかは 6章ででてくるようなので、そのときに勉強します。
*/
